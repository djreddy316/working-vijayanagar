{"ast":null,"code":"var _jsxFileName = \"D:\\\\vijayanagar-working\\\\working-vijayanagar\\\\src\\\\components\\\\userManagement\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Table from \"../common/userTable\";\nimport { ManagementSection, BannerHeading } from \"./styles\";\nimport Panel from \"../common/panel\";\nimport AddUserForm from \"./addUserForm\";\nimport { sampleData } from \"./sampleData\";\nimport { Redirect } from 'react-router-dom';\nimport { selectUsers } from \"../../modals/userManagement/selectors\";\nimport { fetchUsers, deleteUser, addUser, updateUser } from \"../../modals/userManagement/thunk\";\nimport { appFetchAllDesignations, appFetchAllUnits, appFetchAllRoles } from \"../../modals/app/thunk\";\n\nclass UserManagement extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      panelOpenType: \"\",\n      activeUser: null,\n      data: false\n    };\n\n    this.toggleUserPanel = panelOpenType => {\n      console.log(\"panel function inside ==>\");\n      this.setState({\n        panelOpenType\n      });\n    };\n\n    this.editUser = user => {\n      this.setState({\n        panelOpenType: \"edit\",\n        activeUser: user\n      });\n    };\n\n    this.handleDelete = status => {\n      this.setState({\n        showconfirmation: status\n      });\n    };\n\n    this.confirmDelete = () => {\n      const {\n        deleteUser\n      } = this.props;\n      deleteUser();\n      this.handleDelete(false);\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo, \"==>\");\n  }\n\n  componentWillMount() {\n    if (localStorage.getItem(\"role_id\") == undefined) this.history.push(\"/login\");\n  }\n\n  componentDidMount() {\n    let url = \"https://7fidxh52z5.execute-api.ap-south-1.amazonaws.com/prod/getsecurityusers\";\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(result => {\n      result.json().then(resp => {\n        console.warn(resp);\n        this.setState({\n          data: resp\n        });\n      });\n    });\n  }\n\n  render() {\n    if (localStorage.getItem(\"role_id\") == undefined) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: '/login',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 20\n        }\n      });\n    }\n\n    const data = this.state.data;\n    const {\n      panelOpenType,\n      activeUser\n    } = this.state;\n    const {\n      addUser,\n      deleteUser,\n      updateUser,\n      fetchUnits,\n      fetchRoles,\n      fetchDesignations,\n      users\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ManagementSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(BannerHeading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"User Management\"), /*#__PURE__*/React.createElement(Table, {\n      action: this.toggleUserPanel,\n      rowData: this.state.data.data,\n      requiredElements: [\"employeeid\", \"username\", \"firstname\", \"lastname\", \"biometricnumber\", \"phonenumber\"],\n      columnsElements: [\"Employee ID\", \"User Name\", \"First Name\", \"Last Name\", \"Biometric Number\", \"Phone Number\"],\n      panelType: panelOpenType,\n      editUser: this.editUser,\n      deleteUser: this.confirmDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Panel, {\n      panelType: panelOpenType,\n      isPanelOpen: Boolean(panelOpenType),\n      Heading: panelOpenType === \"edit\" ? \"Update user details\" : panelOpenType === \"add\" ? \"Add user\" : panelOpenType === \"searchBy\",\n      closeAction: this.toggleUserPanel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, panelOpenType && (panelOpenType === \"add\" || \"edit\") ? /*#__PURE__*/React.createElement(AddUserForm, {\n      cancelAction: this.toggleUserPanel,\n      addUser: addUser,\n      deleteUser: deleteUser,\n      fetchUnits: fetchUnits,\n      fetchRoles: fetchRoles,\n      fetchDesignations: fetchDesignations,\n      preLoadedValues: activeUser,\n      isEditing: panelOpenType === \"edit\",\n      updateUser: updateUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }) : null));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  users: selectUsers(state)\n});\n\nconst mapDispatchToProps = {\n  addUser: addUser,\n  updateUser: updateUser,\n  fetchUsers: fetchUsers,\n  deleteUser: deleteUser,\n  fetchUnits: appFetchAllUnits,\n  fetchDesignations: appFetchAllDesignations,\n  fetchRoles: appFetchAllRoles\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);","map":{"version":3,"sources":["D:/vijayanagar-working/working-vijayanagar/src/components/userManagement/index.js"],"names":["React","Component","connect","Table","ManagementSection","BannerHeading","Panel","AddUserForm","sampleData","Redirect","selectUsers","fetchUsers","deleteUser","addUser","updateUser","appFetchAllDesignations","appFetchAllUnits","appFetchAllRoles","UserManagement","state","panelOpenType","activeUser","data","toggleUserPanel","console","log","setState","editUser","user","handleDelete","status","showconfirmation","confirmDelete","props","componentDidCatch","error","errorInfo","componentWillMount","localStorage","getItem","undefined","history","push","componentDidMount","url","fetch","method","headers","Accept","then","result","json","resp","warn","render","fetchUnits","fetchRoles","fetchDesignations","users","Boolean","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"../common/userTable\";\r\nimport { ManagementSection, BannerHeading } from \"./styles\";\r\nimport Panel from \"../common/panel\";\r\nimport AddUserForm from \"./addUserForm\";\r\nimport { sampleData } from \"./sampleData\";\r\nimport  { Redirect } from 'react-router-dom'\r\nimport { selectUsers } from \"../../modals/userManagement/selectors\";\r\nimport {\r\n  fetchUsers,\r\n  deleteUser,\r\n  addUser,\r\n  updateUser,\r\n} from \"../../modals/userManagement/thunk\";\r\nimport {\r\n  appFetchAllDesignations,\r\n  appFetchAllUnits,\r\n  appFetchAllRoles,\r\n} from \"../../modals/app/thunk\";\r\n\r\nclass UserManagement extends Component {\r\n  state = {\r\n    panelOpenType: \"\",\r\n    activeUser: null,\r\n    data: false,\r\n  };\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo, \"==>\");\r\n  }\r\n  \r\ncomponentWillMount() {\r\n   if(localStorage.getItem(\"role_id\")  == undefined)\r\n\tthis.history.push(\"/login\")\r\n   }\r\n  componentDidMount() {\r\n\t  \r\n    let url =\r\n      \"https://7fidxh52z5.execute-api.ap-south-1.amazonaws.com/prod/getsecurityusers\";\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((result) => {\r\n      result.json().then((resp) => {\r\n        console.warn(resp);\r\n        this.setState({ data: resp });\r\n      });\r\n    });\r\n \r\n  }\r\n\r\n  toggleUserPanel = (panelOpenType) => {\r\n    console.log(\"panel function inside ==>\");\r\n    this.setState({ panelOpenType });\r\n  };\r\n\r\n  editUser = (user) => {\r\n    this.setState({ panelOpenType: \"edit\", activeUser: user });\r\n  };\r\n\r\n  handleDelete = (status) => {\r\n    this.setState({ showconfirmation: status });\r\n  };\r\n\r\n  confirmDelete = () => {\r\n    const { deleteUser } = this.props;\r\n    deleteUser();\r\n    this.handleDelete(false);\r\n  };\r\n\r\n  render() {\r\n    if(localStorage.getItem(\"role_id\")  == undefined)\r\n        {\r\n            return <Redirect to={'/login'} />;\r\n        }\r\n    const data = this.state.data;\r\n    const { panelOpenType, activeUser } = this.state;\r\n    const {\r\n      addUser,\r\n      deleteUser,\r\n      updateUser,\r\n      fetchUnits,\r\n      fetchRoles,\r\n      fetchDesignations,\r\n      users,\r\n    } = this.props;\r\n\r\n    return (\r\n      <ManagementSection>\r\n        <BannerHeading>User Management</BannerHeading>\r\n        <Table\r\n          action={this.toggleUserPanel}\r\n          rowData={this.state.data.data}\r\n          requiredElements={[\r\n            \"employeeid\",\r\n            \"username\",\r\n            \"firstname\",\r\n            \"lastname\",\r\n            \"biometricnumber\",\r\n            \"phonenumber\",\r\n          ]}\r\n          columnsElements={[\r\n            \"Employee ID\",\r\n            \"User Name\",\r\n            \"First Name\",\r\n            \"Last Name\",\r\n            \"Biometric Number\",\r\n            \"Phone Number\",\r\n          ]}\r\n          panelType={panelOpenType}\r\n          editUser={this.editUser}\r\n          deleteUser={this.confirmDelete}\r\n        />\r\n        <Panel\r\n          panelType={panelOpenType}\r\n          isPanelOpen={Boolean(panelOpenType)}\r\n          Heading={\r\n            panelOpenType === \"edit\"\r\n              ? \"Update user details\"\r\n              : panelOpenType === \"add\"\r\n              ? \"Add user\"\r\n              : panelOpenType === \"searchBy\"\r\n                       \r\n          }\r\n          closeAction={this.toggleUserPanel}\r\n        >\r\n          {panelOpenType && (panelOpenType === \"add\" || \"edit\") ? (\r\n            <AddUserForm\r\n              cancelAction={this.toggleUserPanel}\r\n              addUser={addUser}\r\n              deleteUser={deleteUser}\r\n              fetchUnits={fetchUnits}\r\n              fetchRoles={fetchRoles}\r\n              fetchDesignations={fetchDesignations}\r\n              preLoadedValues={activeUser}\r\n              isEditing={panelOpenType === \"edit\"}\r\n              updateUser={updateUser}\r\n            />\r\n          ) : null}\r\n        </Panel>\r\n      </ManagementSection>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  users: selectUsers(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addUser: addUser,\r\n  updateUser: updateUser,\r\n  fetchUsers: fetchUsers,\r\n  deleteUser: deleteUser,\r\n  fetchUnits: appFetchAllUnits,\r\n  fetchDesignations: appFetchAllDesignations,\r\n  fetchRoles: appFetchAllRoles,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);\r\n"]},"metadata":{},"sourceType":"module"}