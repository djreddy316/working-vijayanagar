{"ast":null,"code":"import { selectYard } from \"./selectors\";\nimport { setYards } from \"./actions\";\nimport axios from \"axios\";\nimport { fetchYardUrl, deleteYardUrl, addYardUrl, updateYardUrl } from \"./api\";\nimport { appShowPushNotification } from \"../app/thunk\";\nconst header = {\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"x-api-key\": `${process.env.REACT_APP_API_KEY}`\n  }\n};\nexport const deleteYard = yard => async (dispatch, getState) => {\n  //const yard = selectCamera(getState());\n  console.log(yard); //const updatedCameras = camera.filter((list) => list.id !== camera.id);\n  //dispatch(setCameras(updatedCameras));\n  //api request\n\n  const respone = await axios.post(deleteYardUrl, yard, header); //console.log(\"api data ==>\", respone);\n\n  dispatch(appShowPushNotification(\"successfully deleted user\"));\n  dispatch(fetchYard());\n};\nexport const fetchYard = () => async (dispatch, getState) => {\n  const {\n    data: yard\n  } = await axios.get(fetchYardUrl, header);\n  console.log(\"Yards fetched data ==>\", yard.data);\n  dispatch(setYards(yard ? yard.data : []));\n};\nexport const addYard = yard => async (dispatch, getState) => {\n  try {\n    console.log(\"add Yard data before post ==>\", yard);\n    dispatch(appShowPushNotification(\"adding Yard in Yard management\"));\n    console.log('Yard from thunk', JSON.stringify(yard));\n    const response = await axios.post(addYardUrl, yard, header);\n    console.log(response);\n    dispatch(fetchYard());\n    dispatch(appShowPushNotification(\"successfully added Yard\"));\n  } catch (err) {\n    dispatch(appShowPushNotification(\"failed to add Yard, try again\"));\n    console.error(`failed to add Yard with ${err}`);\n  }\n};\nexport const updateYard = yard => async (dispatch, getState) => {\n  dispatch(appShowPushNotification(\"updating Yard\"));\n\n  try {\n    console.log(\"updating Yard ==>\", yard);\n    const updateResponse = await axios.post(updateYardUrl, yard, header);\n    dispatch(fetchYard());\n    dispatch(appShowPushNotification(\"successfully updated Yard\"));\n    console.log(\"updated response ==>\", updateResponse);\n  } catch (err) {\n    dispatch(appShowPushNotification(\"failed to update Yard, try again\"));\n    console.error(`failed to update Yard with ${err}`);\n  }\n};","map":{"version":3,"sources":["D:/vijayanagar-working/working-vijayanagar/src/modals/YardManagement/thunk.js"],"names":["selectYard","setYards","axios","fetchYardUrl","deleteYardUrl","addYardUrl","updateYardUrl","appShowPushNotification","header","headers","Accept","process","env","REACT_APP_API_KEY","deleteYard","yard","dispatch","getState","console","log","respone","post","fetchYard","data","get","addYard","JSON","stringify","response","err","error","updateYard","updateResponse"],"mappings":"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","sourcesContent":["import { selectYard } from \"./selectors\";\r\nimport { setYards } from \"./actions\";\r\nimport axios from \"axios\";\r\nimport { fetchYardUrl, deleteYardUrl, addYardUrl, updateYardUrl } from \"./api\";\r\nimport { appShowPushNotification } from \"../app/thunk\";\r\n\r\nconst header = {\r\n  headers: {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n    \"x-api-key\" : `${process.env.REACT_APP_API_KEY}`,\r\n  } \r\n};   \r\nexport const deleteYard = (yard) => async (dispatch, getState) => {\r\n  //const yard = selectCamera(getState());\r\n  console.log(yard);\r\n  //const updatedCameras = camera.filter((list) => list.id !== camera.id);\r\n  //dispatch(setCameras(updatedCameras));\r\n  //api request\r\n  const respone = await axios.post(deleteYardUrl, yard,header);\r\n \r\n  //console.log(\"api data ==>\", respone);\r\n  dispatch(appShowPushNotification(\"successfully deleted user\"));\r\n  dispatch(fetchYard());\r\n};\r\n\r\nexport const fetchYard = () => async (dispatch, getState) => {\r\n  const { data: yard } = await axios.get(fetchYardUrl,header);\r\n  console.log(\"Yards fetched data ==>\", yard.data);\r\n  dispatch(setYards(yard ? yard.data : []));\r\n};\r\n\r\nexport const addYard = (yard) => async (dispatch, getState) => {\r\n  try {\r\n    console.log(\"add Yard data before post ==>\", yard);\r\n    dispatch(appShowPushNotification(\"adding Yard in Yard management\"));\r\n    console.log('Yard from thunk', JSON.stringify(yard));\r\n    const response = await axios.post(addYardUrl, yard,header);\r\n    console.log(response);\r\n    dispatch(fetchYard());\r\n    dispatch(appShowPushNotification(\"successfully added Yard\"));\r\n  } catch (err) {\r\n    dispatch(appShowPushNotification(\"failed to add Yard, try again\"));\r\n    console.error(`failed to add Yard with ${err}`);\r\n  }\r\n};\r\n\r\nexport const updateYard = (yard) => async (dispatch, getState) => {\r\n  dispatch(appShowPushNotification(\"updating Yard\"));\r\n  try {\r\n    console.log(\"updating Yard ==>\", yard);\r\n    const updateResponse = await axios.post(updateYardUrl, yard,header);\r\n    dispatch(fetchYard());\r\n    dispatch(appShowPushNotification(\"successfully updated Yard\"));\r\n    console.log(\"updated response ==>\", updateResponse);\r\n  } catch (err) {\r\n    dispatch(appShowPushNotification(\"failed to update Yard, try again\"));\r\n    console.error(`failed to update Yard with ${err}`);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}